# -*- coding: utf-8 -*-
"""Homework7-ELT.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NMOzrYjhetah_NlSD__I6LeMGAO1R4SO
"""

# Importing necessary modules
from airflow.decorators import task
from airflow import DAG
from airflow.models import Variable
from airflow.operators.python import get_current_context
from airflow.providers.snowflake.hooks.snowflake import SnowflakeHook

from datetime import datetime
from datetime import timedelta
import logging
import snowflake.connector


# Establishing connection to Snowflake
def return_snowflake_conn():

    # Initialize the SnowflakeHook
    hook = SnowflakeHook(snowflake_conn_id='snowflake_conn')

    # Execute the query and fetch results
    conn = hook.get_conn()
    return conn.cursor()


@task
def run_ctas(table, select_sql, primary_key=None):

    logging.info(table)
    logging.info(select_sql)

    cur = return_snowflake_conn()

    try:
        cur.execute("BEGIN;")
        sql = f"CREATE OR REPLACE TABLE {table} AS {select_sql}"
        logging.info(sql)
        cur.execute(sql)

        # Checking for Primary Key Uniqueness
        if primary_key is not None:
            sql = f"SELECT {primary_key}, COUNT(1) AS cnt FROM {table} GROUP BY 1 ORDER BY 2 DESC LIMIT 1"
            print(sql)
            cur.execute(sql)
            result = cur.fetchone()
            print(result, result[1])
            if int(result[1]) > 1:
                print("!!!!!!!!!!!!!!")
                raise Exception(f"Primary key uniqueness failed: {result}")

        # Query to check for duplicates
        duplicate_check_sql = f"SELECT sessionId FROM {table} GROUP BY sessionId HAVING COUNT(*) > 1";
        logging.info(duplicate_check_sql)

        # Execute the duplicate check
        cur.execute(duplicate_check_sql)
        duplicates = cur.fetchall()

        # Raise exception if duplicate sessionId found
        if duplicates:
            raise Exception("Duplicate records found !! Aborting ELT...")

        cur.execute("COMMIT;")
    except Exception as e:
        cur.execute("ROLLBACK")
        logging.error('Failed to sql. Completed ROLLBACK!')
        raise


with DAG(
    dag_id = 'SessionSummary',
    description = 'Creating Session Summary through ELT',
        default_args={
        "owner": "Shatayu Thakur",
        "email": ["shatayu.thakur@sjsu.edu"],
        "email_on_failure": True,
        "email_on_retry": True,
        "email_on_success": True,
        "retries": 1,
        "retry_delay": timedelta(minutes=5),
    },
    start_date = datetime(2024,10,21),
    catchup=False,
    tags=['ELT'],
    schedule = '10 * * * *' # Run every hour at the 10th minute i.e. after ETL completes
) as dag:
    table = "dev.analytics.session_summary"
    select_sql = """SELECT u.*, s.ts
    FROM dev.raw_data.user_session_channel u
    JOIN dev.raw_data.session_timestamp s ON u.sessionId=s.sessionId
    """
    run_ctas(table, select_sql, primary_key='sessionId')